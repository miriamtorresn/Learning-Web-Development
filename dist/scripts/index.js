(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}();const e=new class{get(t){return this.makeAPICall("GET",t)}makeAPICall(t,e){return new Promise(((a,s)=>{const i=window.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");i.onreadystatechange=()=>{4===i.readyState&&(200==i.status?a(JSON.parse(i.responseText)):s({status:i.status,message:"Sorry, Something went wrong"}))},i.open(t,e),i.send()}))}},a=new class{updateHTMLById(t,e){document.getElementById(t).innerHTML=e}divideArray(t,e){return new Array(Math.ceil(t.length/e)).fill().map((()=>t.splice(0,e)))}getURLParam(t){return new URLSearchParams(window.location.search).get(t)}},s=new class{constructor(t){this.utils=t}getActivePage(){const t=this.utils.getURLParam("page");return Number(t)||1}loadPagination(t,e){let a="";for(let s=1;s<=t;s++)a+=`<li class="page-item ${e===s?"active":""}">\n              <a class="page-link" href="${window.location.origin}${window.location.pathname}?page=${s}">${s}</a>\n          </li>`;return a}}(a);t.g.shop=new class{constructor(t,e,a){this.products=[],this.paginationItems=8,this.pagination=e,this.utils=t,this.ajax=a,this.cart=new class{constructor(t,e){this.cartElements=[],this.products=t,this.utils=e}updateProducts(t){this.products=t}addToCart(t,e){this.updateCart(t,(()=>{this.productExits(e)?this.updateCartItem(e,"add"):this.addNewItemToCart(e)}))}substactFromCart(t,e){this.updateCart(t,(()=>{this.productExits(e)&&this.updateCartItem(e,"substract")}))}deleteFromCart(t,e){this.updateCart(t,(()=>{this.updateCartItem(e,"delete")}))}updateCart(t,e){t.preventDefault(),e(),this.updateAllItemsCartQuantity(),this.updateCartSummary()}productExits(t){return this.cartElements.some((e=>e.id===t))}updateAllItemsCartQuantity(){const t=this.cartElements.reduce(((t,e)=>t+e.quantity),0);this.utils.updateHTMLById("cart-items",t)}updateCartItem(t,e){"delete"===e?this.cartElements=this.cartElements.filter((e=>(this.utils.updateHTMLById(`card-product-quantity-${t}`,0),e.id!==t))):this.cartElements.map((a=>{if(a.id===t)switch(e){case"add":a.quantity+=1,this.utils.updateHTMLById(`card-product-quantity-${a.id}`,a.quantity);break;case"substract":a.quantity>1?(a.quantity-=1,this.utils.updateHTMLById(`card-product-quantity-${a.id}`,a.quantity)):this.updateCartItem(t,"delete")}return a}))}addNewItemToCart(t){this.cartElements.push({id:t,quantity:1}),this.utils.updateHTMLById(`card-product-quantity-${t}`,1)}updateCartSummary(){let t="";this.cartElements.forEach((e=>{const a=this.getCartProduct(e);t+=`\n              <div class="col-3">\n                  <div class="card">\n                      <div class="card-body">\n                      <h5 class="card-title">${a.name}</h5>\n                      <p class="card-text price">$${a.price} ${a.currency}</p>\n                      <p class="card-text">Quantity ${a.quantity}</p>\n                      </div>\n                  </div>\n              </div>`})),this.utils.updateHTMLById("cart-summary",t)}getCartProduct(t){const e=this.products.find((e=>e.id===t.id));return{...t,...e}}}(this.products,t)}loadProducts(){this.ajax.get("https://61101b8dc848c900171b3a84.mockapi.io/products").then((t=>{this.products=t,this.printProductsList(),this.cart.updateProducts(this.products)})).catch((t=>{console.error(t),document.body.innerHTML=`\n                  <div class="error-page">\n                      <div class="container">\n                          <div class="row">\n                              <div class="col-1"><h1>:(</h1></div>\n                              <div class="col-11">\n                                  <h2>${t.message}</h2>\n                                  <p>CÃ³digo del error: ${t.status}</p>\n                              </div>\n                          </div>                            \n                      </div>\n                  </div>\n              `}))}printProductsList(t=null){let e="";const a=this.products.filter((e=>{let a=!0;if(t){const s=e.name.toLowerCase(),i=t.toLowerCase();a=s.includes(i)}return a}));if(a.length>0){const t=this.pagination.getActivePage(),s=this.utils.divideArray(a,this.paginationItems);s[t-1].forEach((t=>{e+=this.getProductCardHTML(t)})),document.getElementById("pagination-list").innerHTML=this.pagination.loadPagination(s.length,t),document.getElementById("products-list").innerHTML=e}else document.getElementById("products-list").innerHTML="No results found"}getProductCardHTML(t){return`\n          <div class="col-3">\n              <div class="card">\n                  <img src="${t.image}" class="card-img-top" alt="${t.name}">\n                  <div class="card-body">\n                  <h5 class="card-title">${t.name}</h5>\n                  <p class="card-text">${t.description}</p>\n                  <p class="card-text price">$${t.price} ${t.currency}</p>\n                  <a href="#" class="btn btn-primary" onClick="shop.cart.addToCart(event, '${t.id}')">+</a>\n                  <span id="card-product-quantity-${t.id}">0</span>\n                  <a href="#" class="btn btn-primary" onClick="shop.cart.substactFromCart(event, '${t.id}')">-</a>\n                  <a href="#" class="btn btn-primary" onClick="shop.cart.deleteFromCart(event, '${t.id}')">Delete All</a>\n                  </div>\n              </div>\n          </div>`}doSearch(t){t.preventDefault();const e=document.getElementById("search").value;this.printProductsList(e)}}(a,s,e),t.g.shop.loadProducts()})();